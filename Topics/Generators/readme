few generators are database dependents

List of generators
The following are the list of main generators we are using in the hibernate framework
assigned
increment
sequence
identity
hilo
native
foregin

1) assigned : supports by all databases. it is default generator. when generator is assigned, then its programer responsibility
to provide primary key

2)increment : it also support all the databases
it automatically increment the primary key value by 1. initially it start with 1. (it do max id + 1)

3)sequence : it doesnt support mysql. 
it take the primary key from sequence. it is one of the mostly used generator
But remember, if hibernate want’s to create its own sequence, in hibernate configuration file, hbm2ddl.auto property must be set enabled

Ex : <id name="productId" column="pid">
<generator>
<param name="sequence">MySequence</param>
</genetator>
</id>

to create sequence :

create sequence MySequence incremented by 1;

4) identity : This is database dependent, actually its not working in oracle
In this case (identity generator) the id value is generated by the database, but not by the hibernate,
 but in case of increment hibernate will take over this
 
This identity generator is similar to increment generator, but the difference was increment generator is database independent and
 hibernate uses a select operation for selecting max of id before inserting new record
  
 5) hilo : 
 This generator is database independent
for the first record, the id value will be inserted as 1
for the second record the id value will be inserted as 32768
for the next records the id value will be incremented by 32768 and will stores into the database (i mean adds to the previous)
actually this hibernate stores the count of id values generated in a column of separated table, with name “hibernate_unique_key” by default with the column name “next_hi”
if we want to modify the table and column names theen wee need to pass 2 parameter’s for the hilo generators
 

<id name="productId" column="pid">

<generator>

<param name="table">your table name</param>
<param name="column">your column name </param>

</generator>

</id>

6) native :

when we use this generator class, it first checks whether the database supports identity or not, if not checks for sequence and if not, then hilo will be used finally the order will be..
identity
sequence
hilo
For example, if we are connecting with oracle, if we use generator class as native then it is equal to the generator class sequence.

7)foreign
we will see about this generator in one-to-one relationship, else you may not understand.

 